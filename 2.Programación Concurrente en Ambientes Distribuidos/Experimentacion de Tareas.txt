TAREA 1: Se crean dos hilos, a los cuales se les asigna una letra y un delay (en segundos), para luego establecer una cuenta atrás (de 5 a 1) e imprimir la secuencia.

TAREA 2: Se tiene un arreglo en donde, con un bucle se recorre (con hilos separados y uno por cada uno) cada uno de los elementos y se llama a una función que calcula si el numero es primo o no (módulo utilizado: _thread).

TAREA 3: Se realiza el mismo procedimiento que la tarea 2, pero utilizando el módulo "threading".

TAREA 4: busca "sincronizar" tareas, con la función Lock, donde primero un hilo debe finalizar la tarea para que inicie otro hilo con la actividad.

TAREA 5: Se trabaja con una cola (FIFO), donde con un bucle se le agregan valores de un arreglo y se verifican los factores positivos de cada elemento, todo trabajado con hilos.

-----------------------------------------------------

CONCLUSIONES: 

1) Por cada tarea, los hilos acudirán a ella de forma separada, aprovechando al máximo la concurrencia.

2) Las librerías _thread y threading sirven de infraestructura para implementar hilos y trabajar con funcionalidades que proporcionen.

Threading muestra más detalladamente el proceso de creación de hilos, es más intuitivo. 

En cambio, con _thread se utiliza una primitiva que permite crear cada nuevo hilo pasándole una función junto con los argumentos que ésta recibe.



Formas de creación de hilos:

_thread:

 thread.start_new_thread(funcion, args)



threading:

class MyThread(threading.Thread):

    def __init__(self, args):

        threading.Thread.__init__(self)

        self.arg = arg


Para complementar:
thread.start_new_thread(funcion, args) : inicia un nuevo hilo y devuelve su ID. El hilo ejecuta la función pasada por parametros, junto con los argumentos. Cuando la función finaliza con una excepción/error, se imprime un seguimiento de la pila y luego el hilo sale (pero otros hilos continúan ejecutándose).
_thread trata un hilo como una función, mientras que threading se implementa de forma orientada a objetos, es decir, cada hilo corresponde a un objeto.

A mi tambien me gustaria complementar con algo un poquito minucioso. Ya que estamos trabajando con hilos, debemos buscar ser lo mas eficientes que podamos.
Es por eso que me gustaria colaborar: La funcion thread_count_down usa un while loop


def thread_count_down(name, delay):
     counter = 5

     while counter:
          time.sleep(delay)
          print('Thread %s counting down: %i...' % (name, counter))
          counter -= 1

El problema es que la sentencia 'counter -=1' es interpretada, mientras que recorrer un for loop con un range(), que está implementado en C, es muchisimo mas rapido. El loop quedaria algo asi:

counter=5
for count in range(0,5):
     time.sleep(delay)
     print('Thread %s counting down: %i...' % (name, counter-count))


Quería agregar una observación sobre la quinta tarea.

Si bien se trabaja con una cola de threads, este orden solo se respeta a la hora de abrir cada hilo; a la hora de cerrarse, lo van a hacer de forma independiente según cuál termina con su proceso primero, por ejemplo:

Starting thread A.
Positive factors of 1 are: 1
____________________
Starting thread B.
Positive factors of 10 are: 1 2 5 10
____________________
Starting thread C.
Positive factors of 4 are: 1 2 4
____________________
Positive factors of 3 are: 1 3
____________________
Exiting thread B.
Exiting thread C.
Exiting thread A.

Este es un ejemplo de la ejecución que tuve.